{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","helper.ts","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","getTodoId","todosIds","Math","max","App","todosFromServer","usersFromServer","find","useState","currentTodos","setCurrentTodos","newTodoTitle","setNewTodoTitle","newTodoUserId","setNewTodoUserId","newTodoUser","error","setError","action","method","onSubmit","event","preventDefault","prevTodos","newTodo","htmlFor","type","placeholder","value","onChange","target","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9d82cf01.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      key={id}\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        return <TodoInfo todo={todo} />;\n      })}\n    </section>\n  );\n};\n","import { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport usersFromServer from './api/users';\n\nexport function getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const getTodoId = (todos: Todo[]) => {\n  const todosIds = todos.map(todo => todo.id);\n  const newId = Math.max(...todosIds) + 1;\n\n  return newId;\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport { getTodoId, getUser } from './helper';\n\nexport const App = () => {\n  const todos: Todo[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const [currentTodos, setCurrentTodos] = useState(todos);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [newTodoUserId, setNewTodoUserId] = useState('');\n  const newTodoUser = usersFromServer\n    .find(user => user.id === +newTodoUserId);\n\n  const [error, setError] = useState(false);\n\n  const AddTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (newTodoTitle === '' || +newTodoUserId === 0) {\n      setError(true);\n\n      return;\n    }\n\n    setCurrentTodos((prevTodos) => {\n      const newTodo = {\n        id: getTodoId(prevTodos),\n        title: newTodoTitle,\n        completed: false,\n        userId: +newTodoUserId,\n        user: newTodoUser,\n      };\n\n      return [...prevTodos, newTodo];\n    });\n    setNewTodoTitle('');\n    setNewTodoUserId('');\n    setError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={AddTodo}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">\n            Title:&nbsp;\n            <input\n              id=\"title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTodoTitle}\n              onChange={(event) => {\n                setNewTodoTitle(event.target.value);\n              }}\n            />\n          </label>\n          {error && newTodoTitle === '' && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">\n            User:&nbsp;\n            <select\n              name=\"user\"\n              id=\"user\"\n              data-cy=\"userSelect\"\n              value={newTodoUserId}\n              onChange={(event) => {\n                setNewTodoUserId(event.target.value);\n              }}\n            >\n              <option value=\"0\" selected>Choose a user</option>\n              {usersFromServer.map(user => {\n                const { id, name } = user;\n\n                return (\n                  <option value={id}>{name}</option>\n                );\n              })}\n            </select>\n          </label>\n\n          {error && +newTodoUserId === 0 && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}